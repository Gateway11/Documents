第二章 寄存器
	2.1.3 寄存器
		8个32位通用寄存器(eax,ebx,edx,ecx,esi,edi,esp,ebp)，6个16位段寄存器(cs,ds,ss,es,fs,gs)。	

	2.1.4 标志寄存器
		1.状态标志(CF进位, PF奇偶, AF, ZF零标志, SF符号, OF溢出)
		2.控制标志(DF方向标志,用于控制处理器处理字符串的方式)
		3.系统标志(TF陷阱标志, IF中断标志, IOPL I/O特权级别标志, NT嵌套任务标志, RF恢复标志, VM虚拟8086模式标志, AC对准检察标志, VIF虚拟中断标志, VIP虚拟中断挂起标志, ID识别标志)

	2.2.2 多媒体扩展(MMX 奔腾II),MMX引入8个FPU寄存器(MM0--MM7)
		1.64位打包字节整数
		2.64位打包字整数
		3.64位打包双字整数	

	2.2.3 流化SIMD扩展(XMM 奔腾III),SSE引入8个128位寄存器(XMM0--XMM7),奔腾4实现了(SSE2),引入五种新数据
		1.128位打包双精度浮点数
		2.128位打包字节整数
		3.128打包字整数
		4.128位打包双字整数
		5.128位打包四字整数

第三章 相关工具
	3.2.2 汇编器(GAS as),as -o test.o test.s

	3.2.3 链接器(ld),ld -o test test.o

	3.5.1 GNU调度器(gdb)，(KED 调度大型程序)
		-----------------------------------------------------------------------------------------
			命令						描述
		-----------------------------------------------------------------------------------------
			break				断点调度
			watch				设置监视点，当变量到特定值结束执行
			info				观察系统元素，寄存器，内存，堆栈
			x					检查内存位置
			print				显示变量值
			run					在调度器中开始执行程序
			list				列出指定的函数或行
			ntxt				执行程序中的下一条指令
			step				同上
			cont				从停止的位置继续执行
			until				运行程序，直到到达指定 源代码行
		------------------------------------------------------------------------------------------
		info register	显示寄器数据
		print/x $ebx	x十六进制,d十进制,t二进制
		x/nyz
			n：显示的字串长度
			y：(c, d, x)
			z：b用于字节，h十六位字，w三十二位字
			例：x/42cb &output

第四章 汇编语言范例
	4.2.1 CPUID指令,获取一些系统硬件信息(test1.s)

第五章 传送数据
	5.1.1 定义数据元素
		------------------------------------------------------------------------------------------
			命令						数据类型
		------------------------------------------------------------------------------------------
			.ascii				文本字符串
			.asciz				以空字符结尾本文字符串
			.byte
			.double
			.float
			.int
			.long
			.octa				16字节整数
			.quad				8字节整数
			.short
			.single				单精度浮点数
		------------------------------------------------------------------------------------------

	5.1.2 定义静态符号,不可改
		.equ LINUX_SYS_CALL 0X80
		movl $LINUX_SYS_CALL, %eax
	
	5.1.3 bss段(堆)
		.comm buffer, 1000 声明一块未使用的内存
		.lcomm buffer, 1000 声明一快未使用的本地内存

	5.3.1 CMOV指令集
		无符号条件传送指令(e 表示equals, b below, a above)例test2.s
		------------------------------------------------------------------------------------------
			指令						描述							EFLAGS状态
		------------------------------------------------------------------------------------------
			CMOVA/CMOVNBE		大于/不小于或等于						CF或ZF=0		
			CMOVAE/CMOVNB		大于或等于/不小于						CF=0(没有进位)
			CMOVNC				无进位									CF=0
			CMOVB/CMOVNAE		小于/不大于或等于						CF=1
			CMOVC				进位									CF=1
			CMOVBE/CMOVNA		小于或等于/不大于						CF或ZF=1
			CMOVE/CMOVZ			等于/零									ZF=1
			CMOVNE/CMOVNZ		不等于/非零								ZF=0
			CMOVP/CMOVPE		奇偶校验/偶校验							PF=1
			CMOVNP/CMOVPO		非奇偶校验/奇校验						PF=0(二进制1的个数为奇数)
		------------------------------------------------------------------------------------------
		有符号条件传送指令
		------------------------------------------------------------------------------------------
			指令						描述							EFLAGS状态
		------------------------------------------------------------------------------------------
			CMOVGE/CMOVNL		大于或等于/不小于						(SF异或OF)=0 ah>bh 注：如果因为溢出导致结果为负，其真正结果必然为正
			CMOVL/CMOVNGE		小于/不大于或等于						(SF异或OF)=0 ah<bh 注：如果因为溢出导致结果为正，其真正结果必然为负
			CMOVLE/CMOVNG		小于或等于/不大于						((SF异或OF) 或ZF)=1
			CMOVO				溢出									OF=1
			CMOVNO				非溢出									OF=0
			CMOVS				负数									SF=1
			CMOVNS				非负									SF=0
		------------------------------------------------------------------------------------------
	
	5.4.1 数据交换指令
		------------------------------------------------------------------------------------------
			指令						描述							
		------------------------------------------------------------------------------------------
			XCHG				在两个寄存器或寄存器和内存之间交换数据	
			BSWAP				反转一个32寄存器上字节的顺序,注意是字节
			XADD				交换两个值并且把总和存储在目标操作数中
			CMPXCHG				一个值和一个外部值比较，交换它和另一个值
			CMPXCHG8B			比较两个64位值，并且交换它们
		------------------------------------------------------------------------------------------
		CMPXCHG(cmpxchg %ebx, data) 比较目标操作数和EAX,AX,AL寄存器中的数。相等，就把源操作值(ebx)加载到目标操作数中；不等，就把目标操作值(data)加载到EAX,AX,AL中(test3.s)
		CMPXCHG8B(cmpxchg8b data) data是一个内存位置，它与EDX,EAX寄存器中的值比较，(EDX是高位，EAX是低位)，相等，就把ECX,EBX寄存器中64位值传送给data内存位置；不等，就把data值加载到EDX,EAX

	5.5.3	
		------------------------------------------------------------------------------------------
			指令						描述							
		------------------------------------------------------------------------------------------
			PUSHA/POPA			压入或弹出所有16位寄存器(cs, ds, ss, es, fs, gs)
			PUSHAD/POPA			压入或弹出所有16位寄存器(eax, ebx, ecx, edx, esi, edi, esp, ebp)
			PUSHF/POPF			压入或弹出EFLAGS寄存器低16位
			PUSHFD/POPFD		压入或弹出EFLAGS寄存器全部32位
		------------------------------------------------------------------------------------------

第六章 控制执行流程
	6.3.1 条件跳转指令
		------------------------------------------------------------------------------------------
			指令						描述							EFLAGS状态
		------------------------------------------------------------------------------------------
			JA					大于则跳转								CF=0(没有进位)且ZF=0
			JAE					大于或等于则跳转						CF=0
			JB					小于则跳转								CF=1
			JBE					小于或等于则跳转						CF=1或ZF=1
			JC					进位则跳转								CF=1
			JCXZ				CX=0则跳转								
			JECXZ				ECX=0则跳转
			JE					相等则跳转								ZF=1
			JG					大于(grcater)则跳转						ZF=0与SF=OF
			JGE					大于或等于则跳转						SF=OF
			JL					小于(less)则跳转						SF<>OF(不等)
			JLE					小于或等于则跳转						ZF=1或SF<>OF
			JNA					不大于则跳转							CF=1或ZF=1
			JNAE				
			JNB
			JNBE
			JNC
			JNE
		------------------------------------------------------------------------------------------
		
